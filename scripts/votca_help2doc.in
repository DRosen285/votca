#! /usr/bin/env python3

# Copyright 2009-2021 The VOTCA Development Team (http://www.votca.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import itertools
import subprocess
from pathlib import Path
from typing import Iterable, List, NamedTuple

VERSION = '@PROJECT_VERSION@ #TOOLS_GIT_ID#'
PROGTITLE = 'THE VOTCA::TOOLS help to doc converter'
VOTCAHEADER = f"""
==================================================
========   VOTCA (http://www.votca.org)   ========
==================================================

{PROGTITLE}

please submit bugs to bugs@votca.org 
votca_help2doc, version {VERSION}
"""

AUTHORS = "Written and maintained by the VOTCA Development Team <devs@votca.org>"
COPYRIGHT = """
Copyright 2009-2011 The VOTCA Development Team (http://www.votca.org)

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this  file
except in compliance with the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless  required by applicable law or agreed to in writing, software distributed under the
License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  KIND,
either  express  or  implied.   See  the  License  for  the  specific  language  governing
permissions and limitations under the License.
"""
DESCRIPTION = f"""{VOTCAHEADER}
Convert a Votca CLI's help message to RST format.
Examples:
votca_help2doc.in -n csg_map -o csg_map.rst
"""


class Data(NamedTuple):
    """Data class containing the help's section."""
    name: str
    description: str
    options: str
    authors: str = AUTHORS
    copyright: str = COPYRIGHT


def parse_user_arguments() -> argparse.Namespace:
    """Read the user arguments."""
    parser = argparse.ArgumentParser("help2rst", usage=argparse.SUPPRESS,
                                     description=DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("-n", "--name", required=True,
                        help="Name of the tool to extract the help message")
    parser.add_argument("-o", "--out", help="Output file", default=None)
    parser.add_argument('--version', action='version',
                        version=f"%(prog)s {VERSION}")
    return parser.parse_args()


def take(it: Iterable[str], n: int) -> List[str]:
    """Take n elements from the iterable an return them."""
    return [next(it) for _ in range(n)]


def parse_help_message(msg: str, name: str) -> Data:
    """Parse the help message into an intermediate representation."""
    lines = iter(msg.splitlines())
    # Votca logo
    take(lines, 6)
    # Compilation info
    list(itertools.takewhile(lambda x: x, lines))
    # description
    description = "\n".join(itertools.takewhile(lambda x: x, lines))
    options = "\n  ".join(filter(lambda x: x, lines))
    return Data(name, description, options)


def format_rst(sec: Data) -> str:
    """Format the section as RST."""
    return f"""
NAME
****
{sec.name} - Part of the VOTCA package

SYNOPSIS
********
{sec.name} [OPTION] [OPTIONPARAMETERS]

DESCRIPTION
***********
{sec.description}

OPTIONS
*******
::

  {sec.options}

AUTHORS
*******
{sec.authors}

COPYRIGHT
*********
{sec.copyright}
"""


def convert_help_message(args: argparse.Namespace):
    """Convert help message."""
    path = Path(args.name)
    name = path.stem
    msg = subprocess.check_output(
        f"{path.absolute().as_posix()} --help", shell=True)
    sections = parse_help_message(msg.decode(), name)
    data = format_rst(sections)

    output = args.out if args.out is not None else f"{name}.rst"
    with open(output, 'w') as handler:
        handler.write(data)


def main():
    args = parse_user_arguments()
    convert_help_message(args)


if __name__ == "__main__":
    main()
