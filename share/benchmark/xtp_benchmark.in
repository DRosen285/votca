#! /usr/bin/env python3
#
# Copyright 2009-2020 The VOTCA Development Team (http://www.votca.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys
import os
import time
import numpy as np
import argparse
import h5py
import shutil
import json
import subprocess
import fnmatch

VERSION = '@PROJECT_VERSION@ #CSG_GIT_ID#'
PROGTITLE = 'THE VOTCA::XTP Benchmark'
PROGDESCR = 'Runs a benchmark on a set of geometries'
VOTCAHEADER = '''\
==================================================
========   VOTCA (http://www.votca.org)   ========
==================================================

{progtitle}

please submit bugs to @PROJECT_CONTACT@
benchmark, version {version}

'''.format(version=VERSION, progtitle=PROGTITLE)


def xxquit(what=''):
    if what != '':
        print("ERROR: {what}".format(what=what))
    sys.exit(1)


def ReadEnergyFromHDF5(filename):
    orb = h5py.File(filename, 'r')
    a = orb['QMdata']['BSE_singlet']['eigenvalues'][()]
    return a.flatten()

def ReadIndividualTimingsFromLog(logfile):

    steps= ["DFT","GW","BSE"]
    result={}
    with open(logfile,'r') as f:
        for line in f:
            for step in steps:
                if f"{step} calculation took " in line:
                    if step in result:
                        xxquit(what=f'Logfile {logfile} is corrupted')
                    else:
                        result[step]=float(line.split()[-2])
    return result

def HasGPUs():
    helpstring = subprocess.check_output(['xtp_tools', '-h'])
    return "--gpus" in helpstring.decode('utf8')


class cd:
    """Context manager for changing the current working directory"""

    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

# =============================================================================
# PROGRAM OPTIONS
# =============================================================================


class XtpHelpFormatter(argparse.HelpFormatter):
    def _format_usage(self, usage, action, group, prefix):
        return VOTCAHEADER


progargs = argparse.ArgumentParser(prog='xtp_benchmark',
                                   formatter_class=lambda prog: XtpHelpFormatter(
                                       prog, max_help_position=70),
                                   description=PROGDESCR)

progargs.add_argument('-t', '--threads',
                      required=False,
                      type=int,
                      default=1,
                      help='Number of OPENMP threads')

progargs.add_argument('-r', '--run',
                      action='store_const',
                      const=1,
                      default=0,
                      help='Run benchmark')

progargs.add_argument('-s', '--setup',
                      action='store_const',
                      const=1,
                      default=0,
                      help='Setup Benchmark')

progargs.add_argument('-i', '--input_folder',
                      required=False,
                      type=str,
                      default="Geometries/Geometries_ThielSet",
                      help='Folder to take geometries from')

progargs.add_argument('-o', '--output_folder',
                      required=False,
                      type=str,
                      default="RUN",
                      help='Folder to write benchmark to')

progargs.add_argument('-a', '--analyze',
                      required=False,
                      type=str,
                      help='Process results from folder')

progargs.add_argument('--reference',
                      required=False,
                      type=str,
                      help='In combination with analyze options compare to a reference')

HasGPUs = HasGPUs()
if HasGPUs:
    progargs.add_argument('-g', '--gpus',
                          required=False,
                          type=int,
                          default=0,
                          help='Number of GPUs to use')


OPTIONS = progargs.parse_args()


if OPTIONS.setup:
    print("Creating benchmark directory: {}".format(OPTIONS.output_folder))
    if os.path.isdir(OPTIONS.output_folder):
        xxquit("Folder '{}' already exists".format(OPTIONS.output_folder))
    os.mkdir(OPTIONS.output_folder)

    input_molecules = []

    pattern = "*.xyz"

    for path, subdirs, files in os.walk(OPTIONS.input_folder):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                input_molecules.append([path, name])
    
   
    for mol in input_molecules:
        newpath=os.path.join(OPTIONS.output_folder,os.path.splitext(mol[1])[0])
        os.mkdir(newpath)
        shutil.copyfile(os.path.join(mol[0],mol[1]),os.path.join(newpath,"system.xyz"))
    
    print("Created folders for:\n{}".format("\n".join(m[1] for m in input_molecules)))

if OPTIONS.run:

    print("\nStarting benchmark with {} threads".format(OPTIONS.threads))
    if HasGPUs:
        print(" and {} GPUs".format(OPTIONS.gpus))
    print(30*"-")

    moldata = {}
    totaltime = time.time()
    referencedata = {}
    if OPTIONS.reference:
        print("Loading reference data from '{}'".format(OPTIONS.reference))
        with open(OPTIONS.reference, 'r') as fp:
            referencedata = json.load(fp)

    for mol in os.listdir(OPTIONS.output_folder):
        print("Running {}".format(mol).ljust(30), end="\r")
        with cd(os.path.join(OPTIONS.output_folder,mol)):

            start = time.time()
            if(HasGPUs):
                cmd = 'xtp_tools -e dftgwbse -n system -t {} -g {} > dftgwbse.log'.format(
                OPTIONS.threads,OPTIONS.gpus)
            else:
                cmd = 'xtp_tools -e dftgwbse -n system -t {} > dftgwbse.log'.format(
                OPTIONS.threads)
            os.system(cmd)
            dt = time.time() - start
            molinfo = {}
            molinfo["duration[s]"] = dt
            print("{}".format(mol).ljust(30) +
                  " Duration: \t{:8.2f} seconds.".format(dt), end='')
            if not os.path.isfile("system.orb"):
                print(" Computation Failed")
                molinfo["Status"] = "Failed"
            else:
                S = ReadEnergyFromHDF5("system.orb")
                print(" S1 = {:3.6f}[Hrt]".format(S[0]))
                molinfo["Status"] = "Success"
                molinfo["S1[Hrt]"] = S[0]
                molinfo.update(ReadIndividualTimingsFromLog("dftgwbse.log"))

        if referencedata and referencedata[mol]["Status"] == "Success":
            print(" S1_ref = {:3.6f}[Hrt]".format(
                referencedata[mol]["S1[Hrt]"]))

        moldata[mol] = molinfo

    print(30*"-")
    dttotal = time.time() - totaltime
    print("Total time: {:8.2f}".format(dttotal))
    goodruns = 0
    for _, result in moldata.items():
        if result["Status"] == "Success":
            goodruns += 1
    print("{:1.2f}% of runs completed successfully".format(
        float(goodruns)/float(len(moldata))*100.0))

    print("Writing benchmark data to 'result.json'")
    with open(OPTIONS.output_folder+'/result.json', 'w') as fp:
        json.dump(moldata, fp, sort_keys=True, indent=4)
