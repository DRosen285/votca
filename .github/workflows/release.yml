name: release
on:
  push:
    branches:
      - release_testing
  workflow_dispatch:
    inputs:
      cmake_args:
        description: 'Extra CMake args'
      deploy:
        description: 'Deploy the release'
      tag:
        description: 'The release tag'
        required: true

jobs:
  release:
    if: github.repository_owner == 'votca'
    runs-on: ubuntu-latest
    container: votca/buildenv:latest
    steps:
      - name: Checkout votca   
        uses: actions/checkout@v2.2.0
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.VOTCA_BOT_TOKEN }}
      - name: Setup
        id: setup
        run: |
          git config --global user.name "Votca Bot"
          git config --global user.email "github@votca.org"
          if [[ -z "${{ github.event.inputs.tag }}" ]]; then
            version="$(sed -n 's/set(PROJECT_VERSION *"\([^"]*\)").*/\1/p' CMakeLists.txt)"
            echo "::set-env name=VERSION::${version}"
          else
            version="${{ github.event.inputs.tag }}"
            echo "::set-env name=VERSION::${version#v}"
          fi
          if [[ ${GITHUB_REF} = refs/heads/* ]]; then
            branch="${GITHUB_REF#refs/heads/}"
            [[ ${branch} != release_testing ]] || branch="master"
            echo "::set-env name=BRANCH::${branch}"
          else
            echo "Unsupported GITHUB_REF: ${GITHUB_REF}" >&2
            exit 1
          fi
          echo "::set-env name=DATE::$(date +%s)"
          if ${{ github.event.inputs.deploy == 'yesyesyes' }}; then
            echo "::set-env name=DEPLOY::true"
          else
            echo "::set-env name=DRY_RUN::true"
          fi
      - uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ccache-release-${{ env.BRANCH }}-${{ env.DATE }}  
          restore-keys: ccache-release-${{ env.BRANCH }} 
      - name: Make Release
        env:
          CMAKE_ARGS: ${{ github.event.inputs.cmake_args }}
        run: |
          .github/workflows/make_release.sh --branch ${BRANCH} ${CMAKE_ARGS} --verbose ${VERSION} .
      - name: Show diff
        run: |
          for p in . tools csg csg-manual csgapps csg-tutorials xtp xtp-tutorials; do 
            git -C $p log -p --submodule origin/${BRANCH}..${BRANCH}
          done
      - name: Upload manual
        if: ${{ ! env.DEPLOY }}
        uses: actions/upload-artifact@v2
        with:
          name: csg-manual
          path: votca-csg-manual-${{ env.VERSION }}.pdf
      - name: Check before push
        run: |
          if [[ ( ${VERSION} = *-dev || ${BRANCH} != "stable" ) && ${DEPLOY} ]]; then
            echo "You cannot deploy a dev version or branch that is not 'stable'" >&2
            exit 1
          fi
      - name: Push tags
        run: |
          set -x
          for p in . tools csg csg-manual csgapps csg-tutorials xtp xtp-tutorials; do
            git -C $p push ${DRY_RUN:+--dry-run} --tags origin ${BRANCH}:${BRANCH}
          done
      - name: Create Release
        if: ${{ env.DEPLOY }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.VOTCA_BOT_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: v${{ env.VERSION }}
          prerelease: ${{ contains(env.VERSION, 'rc') }}
      - name: Upload Manual
        if: ${{ env.DEPLOY }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.VOTCA_BOT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./votca-csg-manual-${{ env.VERSION }}.pdf
          asset_name: votca-csg-manual-${{ env.VERSION }}.pdf
          asset_content_type: application/pdf
